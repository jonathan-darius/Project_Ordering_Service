// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: ordering.proto

package OrderingService

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CartServiceClient is the client API for CartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartServiceClient interface {
	AddCartItem(ctx context.Context, in *CartItem, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveCartItem(ctx context.Context, in *CartItem, opts ...grpc.CallOption) (*empty.Empty, error)
	GetCart(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Cart, error)
	EmptyCart(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*empty.Empty, error)
}

type cartServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCartServiceClient(cc grpc.ClientConnInterface) CartServiceClient {
	return &cartServiceClient{cc}
}

func (c *cartServiceClient) AddCartItem(ctx context.Context, in *CartItem, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ordering.CartService/AddCartItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) RemoveCartItem(ctx context.Context, in *CartItem, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ordering.CartService/RemoveCartItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) GetCart(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Cart, error) {
	out := new(Cart)
	err := c.cc.Invoke(ctx, "/ordering.CartService/GetCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) EmptyCart(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ordering.CartService/EmptyCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartServiceServer is the server API for CartService service.
// All implementations must embed UnimplementedCartServiceServer
// for forward compatibility
type CartServiceServer interface {
	AddCartItem(context.Context, *CartItem) (*empty.Empty, error)
	RemoveCartItem(context.Context, *CartItem) (*empty.Empty, error)
	GetCart(context.Context, *UserID) (*Cart, error)
	EmptyCart(context.Context, *UserID) (*empty.Empty, error)
	mustEmbedUnimplementedCartServiceServer()
}

// UnimplementedCartServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCartServiceServer struct {
}

func (UnimplementedCartServiceServer) AddCartItem(context.Context, *CartItem) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCartItem not implemented")
}
func (UnimplementedCartServiceServer) RemoveCartItem(context.Context, *CartItem) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCartItem not implemented")
}
func (UnimplementedCartServiceServer) GetCart(context.Context, *UserID) (*Cart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCart not implemented")
}
func (UnimplementedCartServiceServer) EmptyCart(context.Context, *UserID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmptyCart not implemented")
}
func (UnimplementedCartServiceServer) mustEmbedUnimplementedCartServiceServer() {}

// UnsafeCartServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartServiceServer will
// result in compilation errors.
type UnsafeCartServiceServer interface {
	mustEmbedUnimplementedCartServiceServer()
}

func RegisterCartServiceServer(s grpc.ServiceRegistrar, srv CartServiceServer) {
	s.RegisterService(&CartService_ServiceDesc, srv)
}

func _CartService_AddCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).AddCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.CartService/AddCartItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).AddCartItem(ctx, req.(*CartItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_RemoveCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).RemoveCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.CartService/RemoveCartItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).RemoveCartItem(ctx, req.(*CartItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_GetCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).GetCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.CartService/GetCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).GetCart(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_EmptyCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).EmptyCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.CartService/EmptyCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).EmptyCart(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

// CartService_ServiceDesc is the grpc.ServiceDesc for CartService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CartService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ordering.CartService",
	HandlerType: (*CartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCartItem",
			Handler:    _CartService_AddCartItem_Handler,
		},
		{
			MethodName: "RemoveCartItem",
			Handler:    _CartService_RemoveCartItem_Handler,
		},
		{
			MethodName: "GetCart",
			Handler:    _CartService_GetCart_Handler,
		},
		{
			MethodName: "EmptyCart",
			Handler:    _CartService_EmptyCart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ordering.proto",
}

// PurchaseClient is the client API for Purchase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PurchaseClient interface {
	PurchaseCart(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*TransactionID, error)
	PurchaseHistory(ctx context.Context, in *UserPurchase, opts ...grpc.CallOption) (Purchase_PurchaseHistoryClient, error)
	DetailTransaction(ctx context.Context, in *TransactionID, opts ...grpc.CallOption) (*Transaction, error)
	AddRating(ctx context.Context, in *Rating, opts ...grpc.CallOption) (*empty.Empty, error)
}

type purchaseClient struct {
	cc grpc.ClientConnInterface
}

func NewPurchaseClient(cc grpc.ClientConnInterface) PurchaseClient {
	return &purchaseClient{cc}
}

func (c *purchaseClient) PurchaseCart(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*TransactionID, error) {
	out := new(TransactionID)
	err := c.cc.Invoke(ctx, "/ordering.Purchase/PurchaseCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseClient) PurchaseHistory(ctx context.Context, in *UserPurchase, opts ...grpc.CallOption) (Purchase_PurchaseHistoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &Purchase_ServiceDesc.Streams[0], "/ordering.Purchase/PurchaseHistory", opts...)
	if err != nil {
		return nil, err
	}
	x := &purchasePurchaseHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Purchase_PurchaseHistoryClient interface {
	Recv() (*Transaction, error)
	grpc.ClientStream
}

type purchasePurchaseHistoryClient struct {
	grpc.ClientStream
}

func (x *purchasePurchaseHistoryClient) Recv() (*Transaction, error) {
	m := new(Transaction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *purchaseClient) DetailTransaction(ctx context.Context, in *TransactionID, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/ordering.Purchase/DetailTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseClient) AddRating(ctx context.Context, in *Rating, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ordering.Purchase/AddRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PurchaseServer is the server API for Purchase service.
// All implementations must embed UnimplementedPurchaseServer
// for forward compatibility
type PurchaseServer interface {
	PurchaseCart(context.Context, *UserID) (*TransactionID, error)
	PurchaseHistory(*UserPurchase, Purchase_PurchaseHistoryServer) error
	DetailTransaction(context.Context, *TransactionID) (*Transaction, error)
	AddRating(context.Context, *Rating) (*empty.Empty, error)
	mustEmbedUnimplementedPurchaseServer()
}

// UnimplementedPurchaseServer must be embedded to have forward compatible implementations.
type UnimplementedPurchaseServer struct {
}

func (UnimplementedPurchaseServer) PurchaseCart(context.Context, *UserID) (*TransactionID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseCart not implemented")
}
func (UnimplementedPurchaseServer) PurchaseHistory(*UserPurchase, Purchase_PurchaseHistoryServer) error {
	return status.Errorf(codes.Unimplemented, "method PurchaseHistory not implemented")
}
func (UnimplementedPurchaseServer) DetailTransaction(context.Context, *TransactionID) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailTransaction not implemented")
}
func (UnimplementedPurchaseServer) AddRating(context.Context, *Rating) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRating not implemented")
}
func (UnimplementedPurchaseServer) mustEmbedUnimplementedPurchaseServer() {}

// UnsafePurchaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PurchaseServer will
// result in compilation errors.
type UnsafePurchaseServer interface {
	mustEmbedUnimplementedPurchaseServer()
}

func RegisterPurchaseServer(s grpc.ServiceRegistrar, srv PurchaseServer) {
	s.RegisterService(&Purchase_ServiceDesc, srv)
}

func _Purchase_PurchaseCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseServer).PurchaseCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.Purchase/PurchaseCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseServer).PurchaseCart(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Purchase_PurchaseHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserPurchase)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PurchaseServer).PurchaseHistory(m, &purchasePurchaseHistoryServer{stream})
}

type Purchase_PurchaseHistoryServer interface {
	Send(*Transaction) error
	grpc.ServerStream
}

type purchasePurchaseHistoryServer struct {
	grpc.ServerStream
}

func (x *purchasePurchaseHistoryServer) Send(m *Transaction) error {
	return x.ServerStream.SendMsg(m)
}

func _Purchase_DetailTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseServer).DetailTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.Purchase/DetailTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseServer).DetailTransaction(ctx, req.(*TransactionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Purchase_AddRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rating)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseServer).AddRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.Purchase/AddRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseServer).AddRating(ctx, req.(*Rating))
	}
	return interceptor(ctx, in, info, handler)
}

// Purchase_ServiceDesc is the grpc.ServiceDesc for Purchase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Purchase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ordering.Purchase",
	HandlerType: (*PurchaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PurchaseCart",
			Handler:    _Purchase_PurchaseCart_Handler,
		},
		{
			MethodName: "DetailTransaction",
			Handler:    _Purchase_DetailTransaction_Handler,
		},
		{
			MethodName: "AddRating",
			Handler:    _Purchase_AddRating_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PurchaseHistory",
			Handler:       _Purchase_PurchaseHistory_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ordering.proto",
}
